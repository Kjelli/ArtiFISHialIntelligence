package ai;

import java.util.List;

import ai.observation.AIObserver;
import fishhandles.OtherFish;
import fishhandles.YourFish;
import gamecontext.GameContext;

public interface AI extends Runnable {
	/**
	 * This method is called at the initialization of the AI's behaviour, before
	 * looping the update method. The method provides an argument being a handle to
	 * your fish, i.e. the only fish you have both read and write access to.
	 * Store this reference and invoke methods on it in the update method.
	 * 
	 * @param fish
	 *            The handle to your fish
	 */

	void init(YourFish fish);

	/**
	 * This method is run continuously as the AI you implement is running its
	 * own thread. It runs an infinite loop, calling update and then sleeping
	 * for some time, leaving you to implement the behaviour of the AI
	 * iteratively. Provided in the update method is a list of read-only handles
	 * to the other fish visible on screen. This list is guaranteed not to
	 * contain the handle to your fish, and also contain the newest information
	 * about the fish's attributes. Note: As every fish runs as a separate
	 * thread, some race conditions may apply - but rarely becomes an issue
	 * because of the rapid calling of the update method.
	 * 
	 * @param otherFish
	 *            A list of other fish with read only access to.
	 * 
	 */
	void update(List<OtherFish> otherFish);

	/**
	 * Called by the game to make sure the ai thread is not running after the
	 * gamecontext is terminated. Further implementing this method is not
	 * necessary.
	 */
	void kill();

	/**
	 * Called by the game to gain access to the gamecontext, which is necessary
	 * to furthermore gain access to the list of the other fish in the
	 * gamecontext.<br>
	 * <br>
	 * <b>Techdays note</b>: Calling of this method will only cause problems for
	 * this thread as you can generate new GameContext objects, but you should
	 * not have access to link the GameContext to the screen. Attempting to
	 * retrieve references to the other fish might cause unexpected behaviour or
	 * throw an exception, limited to this AI, i.e. rendering it useless.
	 * 
	 * @param gc
	 *            The gamecontext to link this ai towards.
	 */
	void setGameContext(GameContext gc);

	/**
	 * Sets the YourFish handle as the one used by this ai. The YourFish handle
	 * is generated by the GameContext to enable read/write access to the given
	 * fish. <br>
	 * <br>
	 * <b>Techdays note</b>: Generating/setting of a new YourFish handle will
	 * most likely not have any effect due to the required reference to a Fish
	 * object, which you should not have access to.
	 * 
	 * @param fish
	 *            The fish handle to connect to the AI
	 */
	void setFishHandler(YourFish fish);

	/**
	 * Retrieves AIObserver responsible for monitoring the performance of this
	 * AI.
	 * 
	 * @return the AIObserver responsible for monitoring the performance of this
	 *         AI
	 */
	AIObserver getAIObserver();

	/**
	 * Action that will happen whenever you eat another fish. Provided is the
	 * referenced handle towards the fish you ate. Warning: This fish is not
	 * alive, so some methods are rendered useless. (i.e moveToward, distanceTo)
	 * 
	 * @param fish
	 *            The handle of the fish this ai has just eaten
	 */

	void ateFish(OtherFish handle);
}
